package org.example.springbootdeveloper.이론;

public class u_communication {
    /*
     application server(애플리케이션 서버)- 8080
     :spring boot 비즈니스 로직을 처리하는역할(데이터를 가공& 클라이언트가 요청한 기능을 수행)
     - 작동 방식
     : 클라이언트가 요청한 데이터나 로직을 처리하고 직접적인 통신보다 주로 api 를 통해 json형태의 데이터를 반환
     (Rest api 데이터 반환)

     web server
     : REACT(React 내부의 웹 서버를 사용)-3000
     : 정적파일 ( html, css, js)등을 제공 , 주로 웹 페이지를 랜더링 하는 용도
      - 작동 방식 : 클라이언트로 부터 요청을 받고 애플리케이션 서버의 데이터를 받아와서
      , 사용자에게 보여주는  역활을 담당

      ==브라우저와 프론트엔드 서버 통신
      1. 사용자가 브라우저를 통해 프론트엔드  웹 애플리케이션(3000번 포트)에 접근
      : 브라우저가 화면을 렌더링
      2. axios요청 설정
        -프로튼 엔드 애플리케이션에서 백엔드와 통신 하기 위해 axios를 사용하여 요청 설정
        : axios.get('http://localhost:8080/api/v1/menus');
        해당 요청에서
            localhost :8080-백엔드 서버 주소 & 포트 번호
            /api/v1/menus/백엔드에서 제공하는 api

      3.Cross-Origin Resource Sharing (Cors 정책)===
      -브라우저는 기본적으로 다른 출저(포트번호가 다른 서버 포함)로의 요청을 차단
      : cors설정; 필요
      - 백엔드 (Spring boot3)에서 다른 출저에서 오는 요청이 허용됨

      4. axios 요청 전송  ==
      -- axios가 http요청을 브라우저를 통해 전송
      : 요청의 주소는 'http://localhost:8080/api/v1/menus'
      :요청 헤더에 필요한 정보가 포함
      +)요청의 메서드가 POST,POT 일 경우 전달할 데이터도 포함

       5. 백엔드 서버의 요청처리  ==
       -요청이 백엔드 서버(Spring boot3)에 도착하면 , 해당경로(api/v1/menus)에 , 매핑된 컨트롤러가 요청을 처리
       -@GetMapping("/api/v1/menus")로 매핑된 메서드가 있다면
       , 해당 메서드가 요청을 받아 필요한 데이터를 처리하고 응답을 생성하여 반환
       == 응답 전송 ==
       -백엔드 서버는 HTTP응답을 생성하여 요청을 보낸 프론트 엔드 서버로 데이터를 전송
       : JSON 데이터 형식으로 응답
       -응답헤더에는 CORS관련 헤더 (프론트엔드 경로로 응답할 수 있음)가 포함
        :프론트엔드가 응답을 정상적으로 수신할 수 있도록 설정

        ===7.프론트엔드의 응답 처리 ===
        프론트엔드 의axios는 백엔드 서버의 응답을 받아
        ,데이터 가공하고 화면에 표시하거나 다른 로직에 사용
        - 예외적으러ㅗ 요청이 실패하거나 cors오류가 발생하묜 axios의 catch 블록에서 에러 처리
     */
}
